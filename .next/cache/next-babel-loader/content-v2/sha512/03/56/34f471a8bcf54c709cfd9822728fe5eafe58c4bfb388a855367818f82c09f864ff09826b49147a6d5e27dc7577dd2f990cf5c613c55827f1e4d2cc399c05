{"ast":null,"code":"import _regeneratorRuntime from \"D:/GarasilabsProjects/nextjs-blog/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/GarasilabsProjects/nextjs-blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"D:/GarasilabsProjects/nextjs-blog/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\nvar postsDirectory = path.join(process.cwd(), \"posts\");\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  var fileNames = fs.readdirSync(postsDirectory);\n  var allPostsData = fileNames.map(function (fileName) {\n    // Remove \".md\" from file name to get id\n    var id = fileName.replace(/\\.md$/, \"\"); // Read markdown file as string\n\n    var fullPath = path.join(postsDirectory, fileName);\n    var fileContents = fs.readFileSync(fullPath, \"utf8\"); // Use gray-matter to parse the post metadata section\n\n    var matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id: id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort(function (_ref, _ref2) {\n    var a = _ref.date;\n    var b = _ref2.date;\n\n    if (a < b) {\n      return 1;\n    } else if (a > b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\nexport function getAllPostIds() {\n  var filenames = fs.readdirSync(postsDirectory); // return array like\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   }\n  // ]\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return filenames.map(function (filename) {\n    return {\n      params: {\n        id: filename.replace(/\\.md$/, \"\")\n      }\n    };\n  });\n}\nexport function getPostData(_x) {\n  return _getPostData.apply(this, arguments);\n}\n\nfunction _getPostData() {\n  _getPostData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n    var fullPath, fileContents, matterResult, processedContent, contentHtml;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fullPath = path.join(postsDirectory, \"\".concat(id, \".md\"));\n            fileContents = fs.readFileSync(fullPath, \"utf8\"); // use gray-matter to parse post metadata section\n\n            matterResult = matter(fileContents); // use remark to convert markdown into html string\n\n            _context.next = 5;\n            return remark().use(html).process(matterResult.content);\n\n          case 5:\n            processedContent = _context.sent;\n            contentHtml = processedContent.toString();\n            return _context.abrupt(\"return\", _objectSpread({\n              id: id,\n              contentHtml: contentHtml\n            }, matterResult.data));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getPostData.apply(this, arguments);\n}","map":{"version":3,"sources":["D:/GarasilabsProjects/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","date","b","getAllPostIds","filenames","filename","params","getPostData","use","content","processedContent","contentHtml","toString"],"mappings":";;;;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,IAAMC,cAAc,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC;AACA,MAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB;AACA,MAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAc,UAACC,QAAD,EAAc;AAC/C;AACA,QAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF+C,CAI/C;;AACA,QAAMC,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,QAAMI,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN+C,CAQ/C;;AACA,QAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B,CAT+C,CAW/C;;AACA;AACEH,MAAAA,EAAE,EAAFA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAhBoB,CAArB,CAHmC,CAoBnC;;AACA,SAAOT,YAAY,CAACU,IAAb,CAAkB,uBAA8B;AAAA,QAArBC,CAAqB,QAA3BC,IAA2B;AAAA,QAARC,CAAQ,SAAdD,IAAc;;AACrD,QAAID,CAAC,GAAGE,CAAR,EAAW;AACT,aAAO,CAAP;AACD,KAFD,MAEO,IAAIF,CAAC,GAAGE,CAAR,EAAW;AAChB,aAAO,CAAC,CAAR;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF,GARM,CAAP;AASD;AAED,OAAO,SAASC,aAAT,GAAyB;AAC9B,MAAMC,SAAS,GAAG3B,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB,CAD8B,CAG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOsB,SAAS,CAACd,GAAV,CAAc,UAACe,QAAD,EAAc;AACjC,WAAO;AACLC,MAAAA,MAAM,EAAE;AACNd,QAAAA,EAAE,EAAEa,QAAQ,CAACZ,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,gBAAsBc,WAAtB;AAAA;AAAA;;;0EAAO,iBAA2Bf,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACCE,YAAAA,QADD,GACYhB,IAAI,CAACK,IAAL,CAAUD,cAAV,YAA6BU,EAA7B,SADZ;AAECG,YAAAA,YAFD,GAEgBlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAFhB,EAIL;;AACMG,YAAAA,YALD,GAKgBlB,MAAM,CAACgB,YAAD,CALtB,EAOL;;AAPK;AAAA,mBAQ0Bf,MAAM,GAClC4B,GAD4B,CACxB3B,IADwB,EAE5BG,OAF4B,CAEpBa,YAAY,CAACY,OAFO,CAR1B;;AAAA;AAQCC,YAAAA,gBARD;AAWCC,YAAAA,WAXD,GAWeD,gBAAgB,CAACE,QAAjB,EAXf;AAAA;AAcHpB,cAAAA,EAAE,EAAFA,EAdG;AAeHmB,cAAAA,WAAW,EAAXA;AAfG,eAgBAd,YAAY,CAACC,IAhBb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import fs from \"fs\";\r\nimport path from \"path\";\r\nimport matter from \"gray-matter\";\r\nimport remark from \"remark\";\r\nimport html from \"remark-html\";\r\n\r\nconst postsDirectory = path.join(process.cwd(), \"posts\");\r\n\r\nexport function getSortedPostsData() {\r\n  // Get file names under /posts\r\n  const fileNames = fs.readdirSync(postsDirectory);\r\n  const allPostsData = fileNames.map((fileName) => {\r\n    // Remove \".md\" from file name to get id\r\n    const id = fileName.replace(/\\.md$/, \"\");\r\n\r\n    // Read markdown file as string\r\n    const fullPath = path.join(postsDirectory, fileName);\r\n    const fileContents = fs.readFileSync(fullPath, \"utf8\");\r\n\r\n    // Use gray-matter to parse the post metadata section\r\n    const matterResult = matter(fileContents);\r\n\r\n    // Combine the data with the id\r\n    return {\r\n      id,\r\n      ...matterResult.data,\r\n    };\r\n  });\r\n  // Sort posts by date\r\n  return allPostsData.sort(({ date: a }, { date: b }) => {\r\n    if (a < b) {\r\n      return 1;\r\n    } else if (a > b) {\r\n      return -1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  });\r\n}\r\n\r\nexport function getAllPostIds() {\r\n  const filenames = fs.readdirSync(postsDirectory);\r\n\r\n  // return array like\r\n  // [\r\n  //   {\r\n  //     params: {\r\n  //       id: 'ssg-ssr'\r\n  //     }\r\n  //   }\r\n  // ]\r\n  //   {\r\n  //     params: {\r\n  //       id: 'pre-rendering'\r\n  //     }\r\n  //   }\r\n  // ]\r\n  return filenames.map((filename) => {\r\n    return {\r\n      params: {\r\n        id: filename.replace(/\\.md$/, \"\"),\r\n      },\r\n    };\r\n  });\r\n}\r\n\r\nexport async function getPostData(id) {\r\n  const fullPath = path.join(postsDirectory, `${id}.md`);\r\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\r\n\r\n  // use gray-matter to parse post metadata section\r\n  const matterResult = matter(fileContents);\r\n\r\n  // use remark to convert markdown into html string\r\n  const processedContent = await remark()\r\n    .use(html)\r\n    .process(matterResult.content);\r\n  const contentHtml = processedContent.toString();\r\n\r\n  return {\r\n    id,\r\n    contentHtml,\r\n    ...matterResult.data,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}