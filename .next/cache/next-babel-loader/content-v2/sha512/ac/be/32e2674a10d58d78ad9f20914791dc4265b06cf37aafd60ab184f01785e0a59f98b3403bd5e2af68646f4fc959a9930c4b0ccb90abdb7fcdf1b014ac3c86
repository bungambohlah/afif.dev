{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport remark from \"remark\";\nimport html from \"remark-html\";\nconst postsDirectory = path.join(process.cwd(), \"posts\");\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, \"\"); // Read markdown file as string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, \"utf8\"); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents); // Combine the data with the id\n\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  }); // Sort posts by date\n\n  return allPostsData.sort(({\n    date: a\n  }, {\n    date: b\n  }) => {\n    if (a < b) {\n      return 1;\n    } else if (a > b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\nexport function getAllPostIds() {\n  const filenames = fs.readdirSync(postsDirectory); // return array like\n  // [\n  //   {\n  //     params: {\n  //       id: 'ssg-ssr'\n  //     }\n  //   }\n  // ]\n  //   {\n  //     params: {\n  //       id: 'pre-rendering'\n  //     }\n  //   }\n  // ]\n\n  return filenames.map(filename => {\n    return {\n      params: {\n        id: filename.replace(/\\.md$/, \"\")\n      }\n    };\n  });\n}\nexport async function getPostData(id) {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\"); // use gray-matter to parse post metadata section\n\n  const matterResult = matter(fileContents); // use remark to convert markdown into html string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  return _objectSpread({\n    id,\n    contentHtml\n  }, matterResult.data);\n}","map":{"version":3,"sources":["D:/GarasilabsProjects/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","remark","html","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","date","a","b","getAllPostIds","filenames","filename","params","getPostData","processedContent","use","content","contentHtml","toString"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,MAAMC,cAAc,GAAGJ,IAAI,CAACK,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC;AACA,QAAMC,SAAS,GAAGV,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB;AACA,QAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AAC/C;AACA,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF+C,CAI/C;;AACA,UAAMC,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,UAAMI,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAN+C,CAQ/C;;AACA,UAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B,CAT+C,CAW/C;;AACA;AACEH,MAAAA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAhBoB,CAArB,CAHmC,CAoBnC;;AACA,SAAOT,YAAY,CAACU,IAAb,CAAkB,CAAC;AAAEC,IAAAA,IAAI,EAAEC;AAAR,GAAD,EAAc;AAAED,IAAAA,IAAI,EAAEE;AAAR,GAAd,KAA8B;AACrD,QAAID,CAAC,GAAGC,CAAR,EAAW;AACT,aAAO,CAAP;AACD,KAFD,MAEO,IAAID,CAAC,GAAGC,CAAR,EAAW;AAChB,aAAO,CAAC,CAAR;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF,GARM,CAAP;AASD;AAED,OAAO,SAASC,aAAT,GAAyB;AAC9B,QAAMC,SAAS,GAAG3B,EAAE,CAACW,WAAH,CAAeN,cAAf,CAAlB,CAD8B,CAG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOsB,SAAS,CAACd,GAAV,CAAee,QAAD,IAAc;AACjC,WAAO;AACLC,MAAAA,MAAM,EAAE;AACNd,QAAAA,EAAE,EAAEa,QAAQ,CAACZ,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,OAAO,eAAec,WAAf,CAA2Bf,EAA3B,EAA+B;AACpC,QAAME,QAAQ,GAAGhB,IAAI,CAACK,IAAL,CAAUD,cAAV,EAA2B,GAAEU,EAAG,KAAhC,CAAjB;AACA,QAAMG,YAAY,GAAGlB,EAAE,CAACmB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAFoC,CAIpC;;AACA,QAAMG,YAAY,GAAGlB,MAAM,CAACgB,YAAD,CAA3B,CALoC,CAOpC;;AACA,QAAMa,gBAAgB,GAAG,MAAM5B,MAAM,GAClC6B,GAD4B,CACxB5B,IADwB,EAE5BG,OAF4B,CAEpBa,YAAY,CAACa,OAFO,CAA/B;AAGA,QAAMC,WAAW,GAAGH,gBAAgB,CAACI,QAAjB,EAApB;AAEA;AACEpB,IAAAA,EADF;AAEEmB,IAAAA;AAFF,KAGKd,YAAY,CAACC,IAHlB;AAKD","sourcesContent":["import fs from \"fs\";\r\nimport path from \"path\";\r\nimport matter from \"gray-matter\";\r\nimport remark from \"remark\";\r\nimport html from \"remark-html\";\r\n\r\nconst postsDirectory = path.join(process.cwd(), \"posts\");\r\n\r\nexport function getSortedPostsData() {\r\n  // Get file names under /posts\r\n  const fileNames = fs.readdirSync(postsDirectory);\r\n  const allPostsData = fileNames.map((fileName) => {\r\n    // Remove \".md\" from file name to get id\r\n    const id = fileName.replace(/\\.md$/, \"\");\r\n\r\n    // Read markdown file as string\r\n    const fullPath = path.join(postsDirectory, fileName);\r\n    const fileContents = fs.readFileSync(fullPath, \"utf8\");\r\n\r\n    // Use gray-matter to parse the post metadata section\r\n    const matterResult = matter(fileContents);\r\n\r\n    // Combine the data with the id\r\n    return {\r\n      id,\r\n      ...matterResult.data,\r\n    };\r\n  });\r\n  // Sort posts by date\r\n  return allPostsData.sort(({ date: a }, { date: b }) => {\r\n    if (a < b) {\r\n      return 1;\r\n    } else if (a > b) {\r\n      return -1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  });\r\n}\r\n\r\nexport function getAllPostIds() {\r\n  const filenames = fs.readdirSync(postsDirectory);\r\n\r\n  // return array like\r\n  // [\r\n  //   {\r\n  //     params: {\r\n  //       id: 'ssg-ssr'\r\n  //     }\r\n  //   }\r\n  // ]\r\n  //   {\r\n  //     params: {\r\n  //       id: 'pre-rendering'\r\n  //     }\r\n  //   }\r\n  // ]\r\n  return filenames.map((filename) => {\r\n    return {\r\n      params: {\r\n        id: filename.replace(/\\.md$/, \"\"),\r\n      },\r\n    };\r\n  });\r\n}\r\n\r\nexport async function getPostData(id) {\r\n  const fullPath = path.join(postsDirectory, `${id}.md`);\r\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\r\n\r\n  // use gray-matter to parse post metadata section\r\n  const matterResult = matter(fileContents);\r\n\r\n  // use remark to convert markdown into html string\r\n  const processedContent = await remark()\r\n    .use(html)\r\n    .process(matterResult.content);\r\n  const contentHtml = processedContent.toString();\r\n\r\n  return {\r\n    id,\r\n    contentHtml,\r\n    ...matterResult.data,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}